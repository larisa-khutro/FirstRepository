Конфигурация. Создание пользователя
git config --global user.name --имя и фамилия
git config --global user.email --email
git config --global color.ui true --цветная тема
 
Конфигурация. Создание проекта
mkrdir название проекта --создает новый проект (новая папка)
cd название проекта --переход в проект (папку)
git init --иницилизрует локальный репозиторий в созданной папке
git help --помощь, документация
git help название команды --документация конкретной команды
git status --отображает текущее состояние репозитория

git add --подготавливает файлы к коммиту (переводит их в отслеживаемую зону staged)
git add . --добавить все файлы в текущей папке 
git add *.java --добавить все файлы в текущей папке с расширением .java
git add someDir/*.java --добавить все файлы в папке SomeDir с расшрением .java
git add someDir/ --добавить все файлы в папке SomeDir
git add "*.java" --добавить все файлы в проекте с расширением .java

git commit -m "Сообщение коммита" --создать новый коммит
git commit -a -m "Сообщение коммита" --последовательное выполнение комманд git add и git commit
git commit --amend -m "Новой сообщение коммита" --внести изменения в последний созданный коммит или изменить сообщение последнего созданного коммита

git log --посмотреть всю историю коммитов

git diff --показывает разницу между текущими неотслеживаемым состоянием репозитория и последним снимком репозитоия (последнним коммитом)
git diff --staged --показывает разницу между текущими отслеживаемым состоянием репозитория и последним снимком репозитоия (последнним коммитом)
git diff COMMIT_ID --показывает разницу между текущими состоянием репозитория и указанным снимком репозитоия

git reset --soft указатель коммита (HEAD/COMMIT_ID) --возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую (staged) зону.
git reset --mixed указатель коммита (HEAD/COMMIT_ID) --возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую (unstaged) зону.
git reset --hard указатель коммита (HEAD/COMMIT_ID) --возвращает проект к указанному коммиту, при этом полностью удаляет все коммиты после указанного.
по умолчанию git reset = git reset --mixed HEAD

git checkout --перемещение между коммитами
git checkout COMMIT_ID
git checkout HEAD^^

git checkout --перемещение между версиями файлов
git checkout COMMIT_ID -- file1 file2 --возвращает указанные файлы к версии, которая была у них в указанном коммите
git checkout -- file1 --возвращает file1 к версии, которая была у него в последнем коммите (HEAD). Работает только для неотслеживаемых (untracked или modified) изменений.
git checkout -- . --Возвращает все файлы к версии, которая была у них в последнем коммите (HEAD). Работает только для неотслеживаемых (untracked или modified) изменений.

Чтобы удалить отслеживаемые изменения, комбинируем команды
git reset -- переводит все отслеживаемые изменения в неотслеживаемые
git checkout -- . --удаляет все неотслеживаемые изменения

git clean --удаляет неотслеживаемые файлы
git clean -n --показывает какие файлы будут удаленны
git clean -f --удаление неотслеживаемых файлов

git branch -- посмотреть на какой ветке находишься
git branch название ветки --добавить новую ветку
git branch -d название ветки --удалить ветку
git branch -r --список удаленных веток

git checkout название ветки --переключение между ветками
git merge название ветки --слияние между ветками //для слияния нужно перейти на ветку, в которую хочешь слить

git remote -v --просмотр сущетсвующих удаленных репозиториев
git remote add название репозитория адрес репозитория --добавить новый удаленный репозиторий, который находится по указанному адресу. При этом на нашем компьютере мы будем к нему обращаться по указанному названию
git remote remove название репозитория --удалить репозиторий с указанным названием
git remote show название репозитория --информация о ветках в проекте

git push название удаленного репозитория название ветки --отправка локального репозитория на удаленный
git push --delete название удаленного репозитория название ветки --удаление удаленной ветки из репозитория
git pull название удаленного репозитория название ветки --получение обновлений с удаленного репозитория
git pull --получение обновлений со всех веток удаленного репозитория

git clone адрес удаленного репозитория --клонирует удаленный репозиторий
-- для того, чтобы зайти в клонированный удаленный репозиторий
ls enter
cd имя удаленного репозитория/

git rebase название ветки --слияние веток без создания merge коммита
git rebase -i указатель коммита --интерактивный rebase, управление коммитами (после вызова команды необходимо нажаить i на клавиатуре для возможности редактирования, после редактирования нажать ESC)
    команда pick --меняет местами коммиты 
    команла reward --меняет название коммита
    команда squash --объединяет указанный коммит с предыдущим
    команда edit --рекдактирует указанный коммит

git fetch --обновляет локальные ветки, чтобы они соответствовали веткам на удаленном репозитории

git cherry-pick указатель коммита --перенос коммита
git cherry-pick --edit указатель коммита --меняет сообщение указанного коммита
git cherry-pick --no-commit указатель коммита --перемещает изменения указанного коммита в отслеживаемую зону в главной ветке
git cherry-pick -x указатель коммита --указывает в сообщении коммита хэш того коммита, из которого мы сделали cherry-pick
git cherry-pick --signoff указатель коммита --указывает в сообщении коммита имя того пользователя, который совершил cherry-pick
